import { RendererFileSystemService } from "./RendererFileSystemService";
import type { AppSettings } from "../types";

// 默认设置
const DEFAULT_SETTINGS: AppSettings = {
    theme: "dark",
    language: "zh",
    autoStart: false,
    minimizeToTray: true,
    devTools: false, // 默认关闭开发者工具
    notifications: {
        projectStatus: true,
        errors: true,
        warnings: true,
        updates: false,
        enableSound: true,
        enableDesktop: true,
    },
    projects: {
        defaultPath: "/Users",
        portRange: {
            express: { start: 3000, end: 3099 },
            vite: { start: 5173, end: 5199 },
            other: { start: 8000, end: 8099 },
            auto: true,
        },
        defaultPackageManager: "npm",

        // 项目创建和管理
        creation: {
            autoInstallDeps: true,
            autoOpenBrowser: false,
            autoOpenEditor: true,
            useLatestVersions: false,
            enableTypeScript: true,
            enableESLint: true,
            enablePrettier: true,
            enableGit: true,
            defaultLicense: "MIT",
        },

        // 运行时管理
        runtime: {
            maxConcurrentProjects: 5,
            autoRestartOnCrash: false,
            autoSaveInterval: 30,
            killProcessesOnStop: true,
            watchFileChanges: true,
            hotReload: true,
        },

        // UI和显示
        ui: {
            showProjectThumbnails: true,
            gridView: true,
            showProjectDetails: true,
            compactMode: false,
            sortBy: "lastOpened",
            sortOrder: "desc",
            favoriteProjects: [],
        },

        // Git集成
        git: {
            enabled: true,
            autoCommit: false,
            autoCommitMessage: "Auto-commit: {{timestamp}}",
            showBranchInProjectCard: true,
            showUncommittedChanges: true,
            defaultBranch: "main",
        },

        // Docker支持
        docker: {
            enabled: false,
            autoDetectDockerfile: true,
            defaultBaseImage: "node:18-alpine",
            autoGenerateDockerfile: false,
            exposePortsAutomatically: true,
        },

        // 终端集成
        terminal: {
            enabled: true,
            defaultShell: "zsh",
            preserveHistory: true,
            maxHistorySize: 1000,
            customCommands: [
                {
                    name: "清理缓存",
                    command: "npm cache clean --force",
                    description: "清理npm缓存",
                },
                {
                    name: "检查端口占用",
                    command: "lsof -i :{{port}}",
                    description: "检查指定端口的占用情况",
                },
            ],
        },

        // 性能监控
        monitoring: {
            enabled: true,
            realTimeMonitoring: true,
            logRetentionDays: 7,
            autoCleanupLogs: true,
            alertOnHighCPU: true,
            alertOnHighMemory: true,
            cpuThreshold: 80,
            memoryThreshold: 1024,
            trackProjectMetrics: true,
            enableErrorTracking: true,
        },

        // 备份系统
        backup: {
            enabled: false,
            autoBackup: false,
            backupInterval: 24,
            maxBackups: 5,
            backupPath: "~/Projects/Backups",
            includeNodeModules: false,
            includeGitHistory: true,
            compressBackups: true,
            excludePatterns: ["node_modules", ".git", "dist", "build", ".cache"],
        },

        // 编辑器集成
        editor: {
            defaultEditor: "vscode",
            customEditorCommand: "",
            openProjectOnCreate: true,
            openSpecificFiles: true,
            defaultFilesToOpen: ["README.md", "package.json", "src/index.ts"],
            enableEditorSync: false,
        },

        // 依赖管理
        dependencies: {
            autoUpdate: false,
            updateFrequency: "weekly",
            checkSecurity: true,
            autoFixVulnerabilities: false,
            showOutdatedPackages: true,
            licenseChecking: false,
        },

        // 模板和脚手架
        templates: {
            customTemplatesPath: "~/Projects/Templates",
            favoriteTemplates: ["full-stack", "pure-api"],
            enableRemoteTemplates: true,
            templateSources: [
                {
                    name: "Official Templates",
                    url: "https://github.com/node-templates/official",
                    enabled: true,
                },
            ],
        },

        // 团队协作
        collaboration: {
            enableTeamFeatures: false,
            shareProjects: false,
            syncSettings: false,
            teamWorkspacePath: "~/Team/Projects",
        },

        // 插件系统
        plugins: {
            enabled: false,
            autoUpdate: true,
            allowThirdParty: false,
            pluginDirectory: "~/NodeAppManager/Plugins",
            installedPlugins: [],
        },
    },
};

/**
 * 设置服务类
 * 负责管理应用设置的读取、保存和更新
 */
export class SettingsService {
    private static cachedSettings: AppSettings | null = null;

    /**
     * 迁移旧设置格式到新格式
     */
    private static migrateOldSettings(oldSettings: any): AppSettings {
        // 如果已经是新格式，直接返回
        if (oldSettings.projects && typeof oldSettings.projects === "object" && oldSettings.projects.creation) {
            return { ...DEFAULT_SETTINGS, ...oldSettings };
        }

        // 处理旧格式的projects设置
        const newSettings: AppSettings = { ...DEFAULT_SETTINGS };

        // 基本设置迁移
        if (oldSettings.theme) newSettings.theme = oldSettings.theme;
        if (oldSettings.language) newSettings.language = oldSettings.language;
        if (oldSettings.autoStart !== undefined) newSettings.autoStart = oldSettings.autoStart;
        if (oldSettings.minimizeToTray !== undefined) newSettings.minimizeToTray = oldSettings.minimizeToTray;
        if (oldSettings.devTools !== undefined) newSettings.devTools = oldSettings.devTools;

        // 通知设置迁移
        if (oldSettings.notifications) {
            newSettings.notifications = { ...DEFAULT_SETTINGS.notifications, ...oldSettings.notifications };
        }

        // 项目设置迁移
        if (oldSettings.projects) {
            const oldProjects = oldSettings.projects;

            // 基本项目设置
            if (oldProjects.defaultPath) newSettings.projects.defaultPath = oldProjects.defaultPath;
            if (oldProjects.defaultPackageManager) newSettings.projects.defaultPackageManager = oldProjects.defaultPackageManager;
            if (oldProjects.portRange) newSettings.projects.portRange = { ...DEFAULT_SETTINGS.projects.portRange, ...oldProjects.portRange };

            // 迁移旧的扁平设置到新的分组结构
            if (oldProjects.autoInstallDeps !== undefined) {
                newSettings.projects.creation.autoInstallDeps = oldProjects.autoInstallDeps;
            }
            if (oldProjects.autoOpenBrowser !== undefined) {
                newSettings.projects.creation.autoOpenBrowser = oldProjects.autoOpenBrowser;
            }
            if (oldProjects.maxConcurrentProjects !== undefined) {
                newSettings.projects.runtime.maxConcurrentProjects = oldProjects.maxConcurrentProjects;
            }
            if (oldProjects.autoSaveInterval !== undefined) {
                newSettings.projects.runtime.autoSaveInterval = oldProjects.autoSaveInterval;
            }
            if (oldProjects.showProjectThumbnails !== undefined) {
                newSettings.projects.ui.showProjectThumbnails = oldProjects.showProjectThumbnails;
            }
            if (oldProjects.gitIntegration !== undefined) {
                newSettings.projects.git.enabled = oldProjects.gitIntegration;
            }
            if (oldProjects.dockerSupport !== undefined) {
                newSettings.projects.docker.enabled = oldProjects.dockerSupport;
            }
        }

        // 终端设置迁移
        if (oldSettings.terminalIntegration || oldSettings.terminal) {
            const terminalSettings = oldSettings.terminalIntegration || oldSettings.terminal;
            if (terminalSettings.enabled !== undefined) {
                newSettings.projects.terminal.enabled = terminalSettings.enabled;
            }
            if (terminalSettings.defaultShell) {
                newSettings.projects.terminal.defaultShell = terminalSettings.defaultShell;
            }
            if (terminalSettings.preserveHistory !== undefined) {
                newSettings.projects.terminal.preserveHistory = terminalSettings.preserveHistory;
            }
        }

        // 监控设置迁移
        if (oldSettings.monitoring) {
            const monitoring = oldSettings.monitoring;
            if (monitoring.enablePerformanceMonitoring !== undefined) {
                newSettings.projects.monitoring.enabled = monitoring.enablePerformanceMonitoring;
            }
            if (monitoring.logRetentionDays !== undefined) {
                newSettings.projects.monitoring.logRetentionDays = monitoring.logRetentionDays;
            }
            if (monitoring.autoCleanupLogs !== undefined) {
                newSettings.projects.monitoring.autoCleanupLogs = monitoring.autoCleanupLogs;
            }
            if (monitoring.alertOnHighCPU !== undefined) {
                newSettings.projects.monitoring.alertOnHighCPU = monitoring.alertOnHighCPU;
            }
            if (monitoring.alertOnHighMemory !== undefined) {
                newSettings.projects.monitoring.alertOnHighMemory = monitoring.alertOnHighMemory;
            }
            if (monitoring.cpuThreshold !== undefined) {
                newSettings.projects.monitoring.cpuThreshold = monitoring.cpuThreshold;
            }
            if (monitoring.memoryThreshold !== undefined) {
                newSettings.projects.monitoring.memoryThreshold = monitoring.memoryThreshold;
            }
        }

        // 备份设置迁移
        if (oldSettings.backup) {
            newSettings.projects.backup = { ...DEFAULT_SETTINGS.projects.backup, ...oldSettings.backup };
        }

        // 编辑器设置迁移
        if (oldSettings.editor) {
            newSettings.projects.editor = { ...DEFAULT_SETTINGS.projects.editor, ...oldSettings.editor };
        }

        return newSettings;
    }

    /**
     * 加载设置
     */
    static async loadSettings(): Promise<AppSettings> {
        try {
            // 强制重新加载，清除缓存（临时修复）
            this.cachedSettings = null;
            console.log("加载设置...");
            // 检查是否在Electron环境中
            if (RendererFileSystemService.isInElectron()) {
                const result = await window.electronAPI!.invoke("settings:load");

                if (result.success && result.data) {
                    const settings = result.data;
                    // 使用迁移函数处理可能的旧格式设置
                    const migratedSettings = this.migrateOldSettings(settings);
                    this.cachedSettings = migratedSettings;
                    return this.cachedSettings;
                }
            } else {
                // 在开发环境中，使用localStorage作为降级方案
                const stored = localStorage.getItem("app-settings");
                if (stored) {
                    const settings = JSON.parse(stored);
                    // 使用迁移函数处理可能的旧格式设置
                    const migratedSettings = this.migrateOldSettings(settings);
                    this.cachedSettings = migratedSettings;
                    return this.cachedSettings;
                }
            }

            // 如果没有找到设置文件，返回默认设置
            this.cachedSettings = DEFAULT_SETTINGS;
            return this.cachedSettings;
        } catch (error) {
            console.error("加载设置失败:", error);
            this.cachedSettings = DEFAULT_SETTINGS;
            return this.cachedSettings;
        }
    }

    /**
     * 保存设置
     */
    static async saveSettings(settings: AppSettings): Promise<boolean> {
        try {
            // 更新缓存
            this.cachedSettings = settings;
            console.log("保存设置");
            // 检查是否在Electron环境中
            if (RendererFileSystemService.isInElectron()) {
                const result = await window.electronAPI!.invoke("settings:save", settings);
                return result.success;
            } else {
                // 在开发环境中，使用localStorage作为降级方案
                localStorage.setItem("app-settings", JSON.stringify(settings));
                return true;
            }
        } catch (error) {
            console.error("保存设置失败:", error);
            return false;
        }
    }

    /**
     * 更新特定设置项
     */
    static async updateSetting<K extends keyof AppSettings>(key: K, value: AppSettings[K]): Promise<boolean> {
        try {
            // 🔧 修复：使用缓存的设置，避免重复加载
            let currentSettings = this.cachedSettings;

            // 只有在缓存不存在时才加载
            if (!currentSettings) {
                console.log("⚠️ 设置缓存为空，重新加载设置...");
                currentSettings = await this.loadSettings();
            }

            // 更新设置
            const newSettings = { ...currentSettings, [key]: value };
            const success = await this.saveSettings(newSettings);

            if (success) {
                // 更新缓存
                this.cachedSettings = newSettings;
                console.log(`✅ 设置项 "${String(key)}" 已更新为:`, value);
            }

            return success;
        } catch (error) {
            console.error("更新设置失败:", error);
            return false;
        }
    }

    /**
     * 重置为默认设置
     */
    static async resetToDefaults(): Promise<boolean> {
        try {
            console.log("重置设置为默认值");
            this.cachedSettings = null;
            return await this.saveSettings(DEFAULT_SETTINGS);
        } catch (error) {
            console.error("重置设置失败:", error);
            return false;
        }
    }

    /**
     * 获取默认设置
     */
    static getDefaultSettings(): AppSettings {
        return { ...DEFAULT_SETTINGS };
    }

    /**
     * 验证设置有效性
     */
    static validateSettings(settings: any): settings is AppSettings {
        try {
            return typeof settings === "object" && settings !== null && ["dark", "light"].includes(settings.theme) && ["zh", "en"].includes(settings.language) && typeof settings.autoStart === "boolean" && typeof settings.minimizeToTray === "boolean" && typeof settings.notifications === "object" && typeof settings.projects === "object";
        } catch {
            return false;
        }
    }
}
